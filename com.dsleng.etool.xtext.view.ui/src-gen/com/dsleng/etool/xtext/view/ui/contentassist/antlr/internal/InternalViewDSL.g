/*
 * generated by Xtext
 */
grammar InternalViewDSL;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.dsleng.etool.xtext.view.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.dsleng.etool.xtext.view.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.dsleng.etool.xtext.view.services.ViewDSLGrammarAccess;

}

@parser::members {
 
 	private ViewDSLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ViewDSLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleHeros
entryRuleHeros 
:
{ before(grammarAccess.getHerosRule()); }
	 ruleHeros
{ after(grammarAccess.getHerosRule()); } 
	 EOF 
;

// Rule Heros
ruleHeros
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHerosAccess().getHerosAssignment()); }
(rule__Heros__HerosAssignment)*
{ after(grammarAccess.getHerosAccess().getHerosAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSuperHero
entryRuleSuperHero 
:
{ before(grammarAccess.getSuperHeroRule()); }
	 ruleSuperHero
{ after(grammarAccess.getSuperHeroRule()); } 
	 EOF 
;

// Rule SuperHero
ruleSuperHero
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSuperHeroAccess().getGroup()); }
(rule__SuperHero__Group__0)
{ after(grammarAccess.getSuperHeroAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule Ability
ruleAbility
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbilityAccess().getAlternatives()); }
(rule__Ability__Alternatives)
{ after(grammarAccess.getAbilityAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Ability__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbilityAccess().getFLYEnumLiteralDeclaration_0()); }
(	'FLY' 
)
{ after(grammarAccess.getAbilityAccess().getFLYEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAbilityAccess().getSUPERPOWEREnumLiteralDeclaration_1()); }
(	'SUPERPOWER' 
)
{ after(grammarAccess.getAbilityAccess().getSUPERPOWEREnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getAbilityAccess().getFIREEnumLiteralDeclaration_2()); }
(	'FIRE' 
)
{ after(grammarAccess.getAbilityAccess().getFIREEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getAbilityAccess().getICEEnumLiteralDeclaration_3()); }
(	'ICE' 
)
{ after(grammarAccess.getAbilityAccess().getICEEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__SuperHero__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SuperHero__Group__0__Impl
	rule__SuperHero__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperHero__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperHeroAccess().getHeroKeyword_0()); }

	'hero' 

{ after(grammarAccess.getSuperHeroAccess().getHeroKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SuperHero__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SuperHero__Group__1__Impl
	rule__SuperHero__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperHero__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperHeroAccess().getNameAssignment_1()); }
(rule__SuperHero__NameAssignment_1)
{ after(grammarAccess.getSuperHeroAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SuperHero__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SuperHero__Group__2__Impl
	rule__SuperHero__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperHero__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperHeroAccess().getCanKeyword_2()); }

	'can' 

{ after(grammarAccess.getSuperHeroAccess().getCanKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SuperHero__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SuperHero__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperHero__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperHeroAccess().getAbilitiesAssignment_3()); }
(rule__SuperHero__AbilitiesAssignment_3)
{ after(grammarAccess.getSuperHeroAccess().getAbilitiesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Heros__HerosAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHerosAccess().getHerosSuperHeroParserRuleCall_0()); }
	ruleSuperHero{ after(grammarAccess.getHerosAccess().getHerosSuperHeroParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SuperHero__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperHeroAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getSuperHeroAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SuperHero__AbilitiesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperHeroAccess().getAbilitiesAbilityEnumRuleCall_3_0()); }
	ruleAbility{ after(grammarAccess.getSuperHeroAccess().getAbilitiesAbilityEnumRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


