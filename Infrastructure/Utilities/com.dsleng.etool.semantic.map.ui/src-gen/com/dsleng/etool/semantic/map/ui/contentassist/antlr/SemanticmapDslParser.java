/*
 * generated by Xtext
 */
package com.dsleng.etool.semantic.map.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.dsleng.etool.semantic.map.services.SemanticmapDslGrammarAccess;

public class SemanticmapDslParser extends AbstractContentAssistParser {
	
	@Inject
	private SemanticmapDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.dsleng.etool.semantic.map.ui.contentassist.antlr.internal.InternalSemanticmapDslParser createParser() {
		com.dsleng.etool.semantic.map.ui.contentassist.antlr.internal.InternalSemanticmapDslParser result = new com.dsleng.etool.semantic.map.ui.contentassist.antlr.internal.InternalSemanticmapDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSemanticMappingAccess().getGroup(), "rule__SemanticMapping__Group__0");
					put(grammarAccess.getMappingsAccess().getGroup(), "rule__Mappings__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getLClassAccess().getGroup(), "rule__LClass__Group__0");
					put(grammarAccess.getElementAccess().getGroup(), "rule__Element__Group__0");
					put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
					put(grammarAccess.getSemanticMappingAccess().getEnameAssignment_0(), "rule__SemanticMapping__EnameAssignment_0");
					put(grammarAccess.getSemanticMappingAccess().getNameAssignment_2(), "rule__SemanticMapping__NameAssignment_2");
					put(grammarAccess.getSemanticMappingAccess().getMappingAssignment_4(), "rule__SemanticMapping__MappingAssignment_4");
					put(grammarAccess.getSemanticMappingAccess().getElAssignment_6(), "rule__SemanticMapping__ElAssignment_6");
					put(grammarAccess.getMappingsAccess().getNameAssignment_4(), "rule__Mappings__NameAssignment_4");
					put(grammarAccess.getMappingsAccess().getValueAssignment_8(), "rule__Mappings__ValueAssignment_8");
					put(grammarAccess.getImportAccess().getImportURIAssignment_1(), "rule__Import__ImportURIAssignment_1");
					put(grammarAccess.getImportAccess().getNameAssignment_3(), "rule__Import__NameAssignment_3");
					put(grammarAccess.getLClassAccess().getEcoreTypesAssignment_0(), "rule__LClass__EcoreTypesAssignment_0");
					put(grammarAccess.getLClassAccess().getObjAssignment_2(), "rule__LClass__ObjAssignment_2");
					put(grammarAccess.getElementAccess().getNameAssignment_1(), "rule__Element__NameAssignment_1");
					put(grammarAccess.getElementAccess().getRefAssignment_3(), "rule__Element__RefAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.dsleng.etool.semantic.map.ui.contentassist.antlr.internal.InternalSemanticmapDslParser typedParser = (com.dsleng.etool.semantic.map.ui.contentassist.antlr.internal.InternalSemanticmapDslParser) parser;
			typedParser.entryRuleSemanticMapping();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SemanticmapDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SemanticmapDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
