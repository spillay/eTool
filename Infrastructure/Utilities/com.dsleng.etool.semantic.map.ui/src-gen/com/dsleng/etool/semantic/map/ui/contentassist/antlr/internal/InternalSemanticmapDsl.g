/*
 * generated by Xtext
 */
grammar InternalSemanticmapDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.dsleng.etool.semantic.map.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.dsleng.etool.semantic.map.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.dsleng.etool.semantic.map.services.SemanticmapDslGrammarAccess;

}

@parser::members {
 
 	private SemanticmapDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(SemanticmapDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleSemanticMapping
entryRuleSemanticMapping 
:
{ before(grammarAccess.getSemanticMappingRule()); }
	 ruleSemanticMapping
{ after(grammarAccess.getSemanticMappingRule()); } 
	 EOF 
;

// Rule SemanticMapping
ruleSemanticMapping
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSemanticMappingAccess().getGroup()); }
(rule__SemanticMapping__Group__0)
{ after(grammarAccess.getSemanticMappingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMappings
entryRuleMappings 
:
{ before(grammarAccess.getMappingsRule()); }
	 ruleMappings
{ after(grammarAccess.getMappingsRule()); } 
	 EOF 
;

// Rule Mappings
ruleMappings
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMappingsAccess().getGroup()); }
(rule__Mappings__Group__0)
{ after(grammarAccess.getMappingsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLClass
entryRuleLClass 
:
{ before(grammarAccess.getLClassRule()); }
	 ruleLClass
{ after(grammarAccess.getLClassRule()); } 
	 EOF 
;

// Rule LClass
ruleLClass
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLClassAccess().getGroup()); }
(rule__LClass__Group__0)
{ after(grammarAccess.getLClassAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElement
entryRuleElement 
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementAccess().getGroup()); }
(rule__Element__Group__0)
{ after(grammarAccess.getElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFQN
entryRuleFQN 
:
{ before(grammarAccess.getFQNRule()); }
	 ruleFQN
{ after(grammarAccess.getFQNRule()); } 
	 EOF 
;

// Rule FQN
ruleFQN
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFQNAccess().getGroup()); }
(rule__FQN__Group__0)
{ after(grammarAccess.getFQNAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SemanticMapping__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SemanticMapping__Group__0__Impl
	rule__SemanticMapping__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SemanticMapping__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSemanticMappingAccess().getEnameAssignment_0()); }
(rule__SemanticMapping__EnameAssignment_0)
{ after(grammarAccess.getSemanticMappingAccess().getEnameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SemanticMapping__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SemanticMapping__Group__1__Impl
	rule__SemanticMapping__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SemanticMapping__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSemanticMappingAccess().getSemanticMappingForKeyword_1()); }

	'SemanticMapping for' 

{ after(grammarAccess.getSemanticMappingAccess().getSemanticMappingForKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SemanticMapping__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SemanticMapping__Group__2__Impl
	rule__SemanticMapping__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SemanticMapping__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSemanticMappingAccess().getNameAssignment_2()); }
(rule__SemanticMapping__NameAssignment_2)
{ after(grammarAccess.getSemanticMappingAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SemanticMapping__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SemanticMapping__Group__3__Impl
	rule__SemanticMapping__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SemanticMapping__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSemanticMappingAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getSemanticMappingAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SemanticMapping__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SemanticMapping__Group__4__Impl
	rule__SemanticMapping__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SemanticMapping__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSemanticMappingAccess().getMappingAssignment_4()); }
(rule__SemanticMapping__MappingAssignment_4)*
{ after(grammarAccess.getSemanticMappingAccess().getMappingAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SemanticMapping__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SemanticMapping__Group__5__Impl
	rule__SemanticMapping__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SemanticMapping__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSemanticMappingAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getSemanticMappingAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SemanticMapping__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SemanticMapping__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SemanticMapping__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSemanticMappingAccess().getElAssignment_6()); }
(rule__SemanticMapping__ElAssignment_6)
{ after(grammarAccess.getSemanticMappingAccess().getElAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Mappings__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mappings__Group__0__Impl
	rule__Mappings__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mappings__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingsAccess().getEcoreKeyword_0()); }

	'Ecore:' 

{ after(grammarAccess.getMappingsAccess().getEcoreKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mappings__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mappings__Group__1__Impl
	rule__Mappings__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mappings__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingsAccess().getLClassParserRuleCall_1()); }
	ruleLClass
{ after(grammarAccess.getMappingsAccess().getLClassParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mappings__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mappings__Group__2__Impl
	rule__Mappings__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Mappings__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingsAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getMappingsAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mappings__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mappings__Group__3__Impl
	rule__Mappings__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Mappings__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingsAccess().getKeyKeyword_3()); }

	'key:' 

{ after(grammarAccess.getMappingsAccess().getKeyKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mappings__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mappings__Group__4__Impl
	rule__Mappings__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Mappings__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingsAccess().getNameAssignment_4()); }
(rule__Mappings__NameAssignment_4)
{ after(grammarAccess.getMappingsAccess().getNameAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mappings__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mappings__Group__5__Impl
	rule__Mappings__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Mappings__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingsAccess().getColonKeyword_5()); }

	':' 

{ after(grammarAccess.getMappingsAccess().getColonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mappings__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mappings__Group__6__Impl
	rule__Mappings__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Mappings__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingsAccess().getValueKeyword_6()); }

	'value:' 

{ after(grammarAccess.getMappingsAccess().getValueKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mappings__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mappings__Group__7__Impl
	rule__Mappings__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Mappings__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingsAccess().getLeftCurlyBracketKeyword_7()); }

	'{' 

{ after(grammarAccess.getMappingsAccess().getLeftCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mappings__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mappings__Group__8__Impl
	rule__Mappings__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Mappings__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingsAccess().getValueAssignment_8()); }
(rule__Mappings__ValueAssignment_8)
{ after(grammarAccess.getMappingsAccess().getValueAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mappings__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mappings__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mappings__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingsAccess().getRightCurlyBracketKeyword_9()); }

	'}' 

{ after(grammarAccess.getMappingsAccess().getRightCurlyBracketKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
	rule__Import__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportURIAssignment_1()); }
(rule__Import__ImportURIAssignment_1)
{ after(grammarAccess.getImportAccess().getImportURIAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__2__Impl
	rule__Import__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getAsKeyword_2()); }

	'as' 

{ after(grammarAccess.getImportAccess().getAsKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getNameAssignment_3()); }
(rule__Import__NameAssignment_3)
{ after(grammarAccess.getImportAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__LClass__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LClass__Group__0__Impl
	rule__LClass__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LClass__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLClassAccess().getEcoreTypesAssignment_0()); }
(rule__LClass__EcoreTypesAssignment_0)
{ after(grammarAccess.getLClassAccess().getEcoreTypesAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LClass__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LClass__Group__1__Impl
	rule__LClass__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LClass__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLClassAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getLClassAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LClass__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LClass__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LClass__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLClassAccess().getObjAssignment_2()); }
(rule__LClass__ObjAssignment_2)
{ after(grammarAccess.getLClassAccess().getObjAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Element__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group__0__Impl
	rule__Element__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getElementKeyword_0()); }

	'element' 

{ after(grammarAccess.getElementAccess().getElementKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group__1__Impl
	rule__Element__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getNameAssignment_1()); }
(rule__Element__NameAssignment_1)
{ after(grammarAccess.getElementAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group__2__Impl
	rule__Element__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getMapsToKeyword_2()); }

	'mapsTo' 

{ after(grammarAccess.getElementAccess().getMapsToKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getRefAssignment_3()); }
(rule__Element__RefAssignment_3)
{ after(grammarAccess.getElementAccess().getRefAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FQN__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group__0__Impl
	rule__FQN__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getGroup_1()); }
(rule__FQN__Group_1__0)*
{ after(grammarAccess.getFQNAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FQN__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group_1__0__Impl
	rule__FQN__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__SemanticMapping__EnameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSemanticMappingAccess().getEnameImportParserRuleCall_0_0()); }
	ruleImport{ after(grammarAccess.getSemanticMappingAccess().getEnameImportParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SemanticMapping__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSemanticMappingAccess().getNameSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getSemanticMappingAccess().getNameSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SemanticMapping__MappingAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSemanticMappingAccess().getMappingMappingsParserRuleCall_4_0()); }
	ruleMappings{ after(grammarAccess.getSemanticMappingAccess().getMappingMappingsParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SemanticMapping__ElAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSemanticMappingAccess().getElElementParserRuleCall_6_0()); }
	ruleElement{ after(grammarAccess.getSemanticMappingAccess().getElElementParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mappings__NameAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingsAccess().getNameSTRINGTerminalRuleCall_4_0()); }
	RULE_STRING{ after(grammarAccess.getMappingsAccess().getNameSTRINGTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mappings__ValueAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingsAccess().getValueSTRINGTerminalRuleCall_8_0()); }
	RULE_STRING{ after(grammarAccess.getMappingsAccess().getValueSTRINGTerminalRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportURIAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getImportAccess().getNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LClass__EcoreTypesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLClassAccess().getEcoreTypesImportCrossReference_0_0()); }
(
{ before(grammarAccess.getLClassAccess().getEcoreTypesImportIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getLClassAccess().getEcoreTypesImportIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getLClassAccess().getEcoreTypesImportCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LClass__ObjAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLClassAccess().getObjEClassCrossReference_2_0()); }
(
{ before(grammarAccess.getLClassAccess().getObjEClassIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getLClassAccess().getObjEClassIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getLClassAccess().getObjEClassCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Element__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getElementAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Element__RefAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getRefEClassCrossReference_3_0()); }
(
{ before(grammarAccess.getElementAccess().getRefEClassFQNParserRuleCall_3_0_1()); }
	ruleFQN{ after(grammarAccess.getElementAccess().getRefEClassFQNParserRuleCall_3_0_1()); }
)
{ after(grammarAccess.getElementAccess().getRefEClassCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


