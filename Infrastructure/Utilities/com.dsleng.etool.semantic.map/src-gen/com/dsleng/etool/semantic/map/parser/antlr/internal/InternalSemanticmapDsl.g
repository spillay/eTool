/*
 * generated by Xtext
 */
grammar InternalSemanticmapDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.dsleng.etool.semantic.map.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.dsleng.etool.semantic.map.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.dsleng.etool.semantic.map.services.SemanticmapDslGrammarAccess;

}

@parser::members {

 	private SemanticmapDslGrammarAccess grammarAccess;
 	
    public InternalSemanticmapDslParser(TokenStream input, SemanticmapDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "SemanticMapping";	
   	}
   	
   	@Override
   	protected SemanticmapDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSemanticMapping
entryRuleSemanticMapping returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSemanticMappingRule()); }
	 iv_ruleSemanticMapping=ruleSemanticMapping 
	 { $current=$iv_ruleSemanticMapping.current; } 
	 EOF 
;

// Rule SemanticMapping
ruleSemanticMapping returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSemanticMappingAccess().getEnameImportParserRuleCall_0_0()); 
	    }
		lv_ename_0_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSemanticMappingRule());
	        }
       		set(
       			$current, 
       			"ename",
        		lv_ename_0_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='SemanticMapping for' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSemanticMappingAccess().getSemanticMappingForKeyword_1());
    }
(
(
		lv_name_2_0=RULE_STRING
		{
			newLeafNode(lv_name_2_0, grammarAccess.getSemanticMappingAccess().getNameSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSemanticMappingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"STRING");
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSemanticMappingAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSemanticMappingAccess().getMappingMappingsParserRuleCall_4_0()); 
	    }
		lv_mapping_4_0=ruleMappings		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSemanticMappingRule());
	        }
       		add(
       			$current, 
       			"mapping",
        		lv_mapping_4_0, 
        		"Mappings");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSemanticMappingAccess().getRightCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSemanticMappingAccess().getElElementParserRuleCall_6_0()); 
	    }
		lv_el_6_0=ruleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSemanticMappingRule());
	        }
       		set(
       			$current, 
       			"el",
        		lv_el_6_0, 
        		"Element");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMappings
entryRuleMappings returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMappingsRule()); }
	 iv_ruleMappings=ruleMappings 
	 { $current=$iv_ruleMappings.current; } 
	 EOF 
;

// Rule Mappings
ruleMappings returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Ecore:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMappingsAccess().getEcoreKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getMappingsAccess().getLClassParserRuleCall_1()); 
    }
    this_LClass_1=ruleLClass
    { 
        $current = $this_LClass_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMappingsAccess().getColonKeyword_2());
    }
	otherlv_3='key:' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMappingsAccess().getKeyKeyword_3());
    }
(
(
		lv_name_4_0=RULE_STRING
		{
			newLeafNode(lv_name_4_0, grammarAccess.getMappingsAccess().getNameSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMappingsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"STRING");
	    }

)
)	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMappingsAccess().getColonKeyword_5());
    }
	otherlv_6='value:' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMappingsAccess().getValueKeyword_6());
    }
	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMappingsAccess().getLeftCurlyBracketKeyword_7());
    }
(
(
		lv_value_8_0=RULE_STRING
		{
			newLeafNode(lv_value_8_0, grammarAccess.getMappingsAccess().getValueSTRINGTerminalRuleCall_8_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMappingsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_8_0, 
        		"STRING");
	    }

)
)	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMappingsAccess().getRightCurlyBracketKeyword_9());
    }
)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importURI_1_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"STRING");
	    }

)
)	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImportAccess().getAsKeyword_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getImportAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleLClass
entryRuleLClass returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLClassRule()); }
	 iv_ruleLClass=ruleLClass 
	 { $current=$iv_ruleLClass.current; } 
	 EOF 
;

// Rule LClass
ruleLClass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLClassRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getLClassAccess().getEcoreTypesImportCrossReference_0_0()); 
	}

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLClassAccess().getFullStopKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLClassRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getLClassAccess().getObjEClassCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	 iv_ruleElement=ruleElement 
	 { $current=$iv_ruleElement.current; } 
	 EOF 
;

// Rule Element
ruleElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='element' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getElementAccess().getElementKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getElementAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='mapsTo' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getElementAccess().getMapsToKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getElementAccess().getRefEClassCrossReference_3_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFQNRule()); } 
	 iv_ruleFQN=ruleFQN 
	 { $current=$iv_ruleFQN.current.getText(); }  
	 EOF 
;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


