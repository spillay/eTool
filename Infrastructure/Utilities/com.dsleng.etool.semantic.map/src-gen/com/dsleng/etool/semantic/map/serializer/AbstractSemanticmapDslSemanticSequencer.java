/*
 * generated by Xtext
 */
package com.dsleng.etool.semantic.map.serializer;

import com.dsleng.etool.semantic.map.services.SemanticmapDslGrammarAccess;
import com.dsleng.etool.semantic.map.smDsl.Element;
import com.dsleng.etool.semantic.map.smDsl.Import;
import com.dsleng.etool.semantic.map.smDsl.LClass;
import com.dsleng.etool.semantic.map.smDsl.SemanticMapping;
import com.dsleng.etool.semantic.map.smDsl.SmDslPackage;
import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public abstract class AbstractSemanticmapDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SemanticmapDslGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == SmDslPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case SmDslPackage.ELEMENT:
				sequence_Element(context, (Element) semanticObject); 
				return; 
			case SmDslPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case SmDslPackage.LCLASS:
				if(context == grammarAccess.getLClassRule()) {
					sequence_LClass(context, (LClass) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getMappingsRule()) {
					sequence_LClass_Mappings(context, (LClass) semanticObject); 
					return; 
				}
				else break;
			case SmDslPackage.SEMANTIC_MAPPING:
				sequence_SemanticMapping(context, (SemanticMapping) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (name=ID ref=[EClass|FQN])
	 */
	protected void sequence_Element(EObject context, Element semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, SmDslPackage.Literals.ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmDslPackage.Literals.ELEMENT__NAME));
			if(transientValues.isValueTransient(semanticObject, SmDslPackage.Literals.ELEMENT__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmDslPackage.Literals.ELEMENT__REF));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getElementAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getElementAccess().getRefEClassFQNParserRuleCall_3_0_1(), semanticObject.getRef());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (importURI=STRING name=ID)
	 */
	protected void sequence_Import(EObject context, Import semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, SmDslPackage.Literals.IMPORT__IMPORT_URI) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmDslPackage.Literals.IMPORT__IMPORT_URI));
			if(transientValues.isValueTransient(semanticObject, SmDslPackage.Literals.IMPORT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmDslPackage.Literals.IMPORT__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0(), semanticObject.getImportURI());
		feeder.accept(grammarAccess.getImportAccess().getNameIDTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (ecoreTypes=[Import|ID] obj=[EClass|ID])
	 */
	protected void sequence_LClass(EObject context, LClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (ecoreTypes=[Import|ID] obj=[EClass|ID] name=STRING value=STRING)
	 */
	protected void sequence_LClass_Mappings(EObject context, LClass semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, SmDslPackage.Literals.LCLASS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmDslPackage.Literals.LCLASS__NAME));
			if(transientValues.isValueTransient(semanticObject, SmDslPackage.Literals.LCLASS__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmDslPackage.Literals.LCLASS__VALUE));
			if(transientValues.isValueTransient(semanticObject, SmDslPackage.Literals.LCLASS__ECORE_TYPES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmDslPackage.Literals.LCLASS__ECORE_TYPES));
			if(transientValues.isValueTransient(semanticObject, SmDslPackage.Literals.LCLASS__OBJ) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmDslPackage.Literals.LCLASS__OBJ));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getLClassAccess().getEcoreTypesImportIDTerminalRuleCall_0_0_1(), semanticObject.getEcoreTypes());
		feeder.accept(grammarAccess.getLClassAccess().getObjEClassIDTerminalRuleCall_2_0_1(), semanticObject.getObj());
		feeder.accept(grammarAccess.getMappingsAccess().getNameSTRINGTerminalRuleCall_4_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMappingsAccess().getValueSTRINGTerminalRuleCall_8_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (ename=Import name=STRING mapping+=Mappings* el=Element)
	 */
	protected void sequence_SemanticMapping(EObject context, SemanticMapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
