/*
 * generated by Xtext
 */
package com.dsleng.etool.semantic.map.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SemanticmapDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SemanticMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SemanticMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEnameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEnameImportParserRuleCall_0_0 = (RuleCall)cEnameAssignment_0.eContents().get(0);
		private final Keyword cSemanticMappingForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMappingAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMappingMappingsParserRuleCall_4_0 = (RuleCall)cMappingAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cElAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElElementParserRuleCall_6_0 = (RuleCall)cElAssignment_6.eContents().get(0);
		
		//SemanticMapping:
		//	ename=Import "SemanticMapping for" name=STRING "{" mapping+=Mappings* "}" el=Element;
		@Override public ParserRule getRule() { return rule; }

		//ename=Import "SemanticMapping for" name=STRING "{" mapping+=Mappings* "}" el=Element
		public Group getGroup() { return cGroup; }

		//ename=Import
		public Assignment getEnameAssignment_0() { return cEnameAssignment_0; }

		//Import
		public RuleCall getEnameImportParserRuleCall_0_0() { return cEnameImportParserRuleCall_0_0; }

		//"SemanticMapping for"
		public Keyword getSemanticMappingForKeyword_1() { return cSemanticMappingForKeyword_1; }

		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//mapping+=Mappings*
		public Assignment getMappingAssignment_4() { return cMappingAssignment_4; }

		//Mappings
		public RuleCall getMappingMappingsParserRuleCall_4_0() { return cMappingMappingsParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }

		//el=Element
		public Assignment getElAssignment_6() { return cElAssignment_6; }

		//Element
		public RuleCall getElElementParserRuleCall_6_0() { return cElElementParserRuleCall_6_0; }
	}

	public class MappingsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mappings");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEcoreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLClassParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cKeyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameSTRINGTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cValueKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cValueAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cValueSTRINGTerminalRuleCall_8_0 = (RuleCall)cValueAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Mappings:
		//	"Ecore:" LClass ":" "key:" name=STRING ":" "value:" "{" value=STRING "}";
		@Override public ParserRule getRule() { return rule; }

		//"Ecore:" LClass ":" "key:" name=STRING ":" "value:" "{" value=STRING "}"
		public Group getGroup() { return cGroup; }

		//"Ecore:"
		public Keyword getEcoreKeyword_0() { return cEcoreKeyword_0; }

		//LClass
		public RuleCall getLClassParserRuleCall_1() { return cLClassParserRuleCall_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//"key:"
		public Keyword getKeyKeyword_3() { return cKeyKeyword_3; }

		//name=STRING
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_4_0() { return cNameSTRINGTerminalRuleCall_4_0; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//"value:"
		public Keyword getValueKeyword_6() { return cValueKeyword_6; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//value=STRING
		public Assignment getValueAssignment_8() { return cValueAssignment_8; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_8_0() { return cValueSTRINGTerminalRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//Import:
		//	"import" importURI=STRING "as" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"import" importURI=STRING "as" name=ID
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}

	public class LClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEcoreTypesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEcoreTypesImportCrossReference_0_0 = (CrossReference)cEcoreTypesAssignment_0.eContents().get(0);
		private final RuleCall cEcoreTypesImportIDTerminalRuleCall_0_0_1 = (RuleCall)cEcoreTypesImportCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cObjAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cObjEClassCrossReference_2_0 = (CrossReference)cObjAssignment_2.eContents().get(0);
		private final RuleCall cObjEClassIDTerminalRuleCall_2_0_1 = (RuleCall)cObjEClassCrossReference_2_0.eContents().get(1);
		
		//LClass:
		//	ecoreTypes=[Import] "." obj=[ecore::EClass];
		@Override public ParserRule getRule() { return rule; }

		//ecoreTypes=[Import] "." obj=[ecore::EClass]
		public Group getGroup() { return cGroup; }

		//ecoreTypes=[Import]
		public Assignment getEcoreTypesAssignment_0() { return cEcoreTypesAssignment_0; }

		//[Import]
		public CrossReference getEcoreTypesImportCrossReference_0_0() { return cEcoreTypesImportCrossReference_0_0; }

		//ID
		public RuleCall getEcoreTypesImportIDTerminalRuleCall_0_0_1() { return cEcoreTypesImportIDTerminalRuleCall_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//obj=[ecore::EClass]
		public Assignment getObjAssignment_2() { return cObjAssignment_2; }

		//[ecore::EClass]
		public CrossReference getObjEClassCrossReference_2_0() { return cObjEClassCrossReference_2_0; }

		//ID
		public RuleCall getObjEClassIDTerminalRuleCall_2_0_1() { return cObjEClassIDTerminalRuleCall_2_0_1; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cMapsToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRefEClassCrossReference_3_0 = (CrossReference)cRefAssignment_3.eContents().get(0);
		private final RuleCall cRefEClassFQNParserRuleCall_3_0_1 = (RuleCall)cRefEClassCrossReference_3_0.eContents().get(1);
		
		//Element:
		//	"element" name=ID "mapsTo" ref=[ecore::EClass|FQN];
		@Override public ParserRule getRule() { return rule; }

		//"element" name=ID "mapsTo" ref=[ecore::EClass|FQN]
		public Group getGroup() { return cGroup; }

		//"element"
		public Keyword getElementKeyword_0() { return cElementKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"mapsTo"
		public Keyword getMapsToKeyword_2() { return cMapsToKeyword_2; }

		//ref=[ecore::EClass|FQN]
		public Assignment getRefAssignment_3() { return cRefAssignment_3; }

		//[ecore::EClass|FQN]
		public CrossReference getRefEClassCrossReference_3_0() { return cRefEClassCrossReference_3_0; }

		//FQN
		public RuleCall getRefEClassFQNParserRuleCall_3_0_1() { return cRefEClassFQNParserRuleCall_3_0_1; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN returns ecore::EString:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final SemanticMappingElements pSemanticMapping;
	private final MappingsElements pMappings;
	private final ImportElements pImport;
	private final LClassElements pLClass;
	private final ElementElements pElement;
	private final FQNElements pFQN;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SemanticmapDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSemanticMapping = new SemanticMappingElements();
		this.pMappings = new MappingsElements();
		this.pImport = new ImportElements();
		this.pLClass = new LClassElements();
		this.pElement = new ElementElements();
		this.pFQN = new FQNElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.dsleng.etool.semantic.map.SemanticmapDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SemanticMapping:
	//	ename=Import "SemanticMapping for" name=STRING "{" mapping+=Mappings* "}" el=Element;
	public SemanticMappingElements getSemanticMappingAccess() {
		return pSemanticMapping;
	}
	
	public ParserRule getSemanticMappingRule() {
		return getSemanticMappingAccess().getRule();
	}

	//Mappings:
	//	"Ecore:" LClass ":" "key:" name=STRING ":" "value:" "{" value=STRING "}";
	public MappingsElements getMappingsAccess() {
		return pMappings;
	}
	
	public ParserRule getMappingsRule() {
		return getMappingsAccess().getRule();
	}

	//Import:
	//	"import" importURI=STRING "as" name=ID;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//LClass:
	//	ecoreTypes=[Import] "." obj=[ecore::EClass];
	public LClassElements getLClassAccess() {
		return pLClass;
	}
	
	public ParserRule getLClassRule() {
		return getLClassAccess().getRule();
	}

	//Element:
	//	"element" name=ID "mapsTo" ref=[ecore::EClass|FQN];
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//FQN returns ecore::EString:
	//	ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
