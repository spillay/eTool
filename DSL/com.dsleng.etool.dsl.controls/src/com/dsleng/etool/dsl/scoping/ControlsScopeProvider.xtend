/*
 * generated by Xtext
 */
package com.dsleng.etool.dsl.scoping

import org.eclipse.xtext.scoping.IScope
import com.dsleng.etool.models.controls.Parameter
import org.eclipse.emf.ecore.EReference
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.emf.common.util.URI
import java.util.Collections
import org.eclipse.xtext.scoping.Scopes
import com.dsleng.etool.models.bobjs.OrgUnit
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.emf.ecore.EClass

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 *
 */
class ControlsScopeProvider extends org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider {
	/* 
	def IScope scope_Parameter_value(Parameter t, EReference reference) {
		val resourceSet = new ResourceSetImpl
		val bobjs = "http://com/dsleng/etool/models/bobjs"
    	val resource = resourceSet.getResource(URI.createURI(bobjs), true)
    	resource.load(Collections::EMPTY_MAP)
    	val pkg = resource.getContents().get(0) as OrgUnit;
    	val classes = EcoreUtil2.getAllContentsOfType(pkg, EClass)
    	for(o: classes){
    		if (o.name == "Attribute"){
    			val attr= o.EAllAttributes
    			return Scopes.scopeFor(attr);
    		}
    	}
		//return Scopes.scopeFor()
    	
	}
	*/
}
