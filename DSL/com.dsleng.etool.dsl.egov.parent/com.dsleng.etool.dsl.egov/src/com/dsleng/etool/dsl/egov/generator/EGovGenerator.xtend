/*
 * generated by Xtext
 */
package com.dsleng.etool.dsl.egov.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import com.dsleng.etool.model.egov.EService
import com.dsleng.etool.model.controls.ControlManager
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class EGovGenerator extends AbstractGenerator {
	// Starting Point of Generation
	// Only Relying on One set of controls
	var ControlManager cm
	
	override doGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for(c : input.resourceSet.allContents.toIterable.filter(ControlManager)){
			println(c.toString)
			cm = c
		}
		val eg = new PageGenerator
		for (e : input.allContents.toIterable.filter(EService)) {
			// Generate the hbms
			val db = new DBGenerator()
			db.doGenerate(e.businessUnit,fsa,e.businessUnit.artifactId,e.businessUnit.package)
			
			val dataLayer = new DataLayerGenerator()
			dataLayer.doGenerate(e.businessUnit,fsa,e.businessUnit.artifactId,e.businessUnit.package)
			
			eg.doGenerate(input,fsa,e.businessUnit.artifactId,e.businessUnit.package,cm)
			
			val menuGen = new MenuGenerator()
			menuGen.doGenerate(input,fsa,e.businessUnit.artifactId,e.businessUnit.package,cm)
			
		}
	}
}
