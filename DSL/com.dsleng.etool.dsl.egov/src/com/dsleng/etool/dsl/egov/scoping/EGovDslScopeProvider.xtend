/*
 * generated by Xtext
 */
package com.dsleng.etool.dsl.egov.scoping

import org.eclipse.xtext.naming.DefaultDeclarativeQualifiedNameProvider
import com.dsleng.etool.models.egov.BOAttribute
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import com.dsleng.etool.models.egov.BOMapper
import org.eclipse.xtext.scoping.Scopes
import com.dsleng.etool.models.bobjs.Attribute
import org.eclipse.xtext.naming.QualifiedName
import com.dsleng.etool.models.bobjs.BusinessObject
import com.dsleng.etool.models.bobjs.OrgUnit

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 *
 */
 class EGovDslQNP extends DefaultDeclarativeQualifiedNameProvider {
 	 def QualifiedName qualifiedName(Attribute e) {
        val bo = e.eContainer as BusinessObject
        val org = bo.eContainer as OrgUnit
        return QualifiedName.create(org.package,bo.name,e.name);
    }
 }
class EGovDslScopeProvider extends org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider {
	def IScope scope_BOAttribute_attribute(BOAttribute t, EReference reference) {
		if ( t instanceof BOAttribute){
			val bomapper = t.eContainer as BOMapper
			return Scopes.scopeFor(bomapper.businessObject.attributes)
		}
	}
}
