grammar com.dsleng.etool.dsl.bobjs.BObjDsl with org.eclipse.xtext.common.Terminals

import "http://com/dsleng/etool/models/bobjs" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

OrgUnit returns OrgUnit:
	{OrgUnit}
	'OrgUnit'
	name=EString
	'setup {'
		'GroupID' groupId=EString','
		'ArtifactID' artifactId=EString','
		'Version' version=EString','
		'Deployment Directory' dirLocation=EString','
		'Language File' langFile=EString','
		'Web Directory' webDirectory=EString
		'Package' package=EString
	'}'
	'{'
		('BusinessTypes' '{' businessobjects+=BusinessType ( "," businessobjects+=BusinessType)* '}' )?
		('BusinessObjects' '{' businessobjects+=BusinessObject ( "," businessobjects+=BusinessObject)* '}' )?
		('BO Enums' '{' boenums+=BOEnum ( "," boenums+=BOEnum)* '}' )?
	'}';



EString returns ecore::EString:
	STRING | ID;

BOEnum returns BOEnum: 
	'name=' name=EString
		('[' literal+=Literal ( "|" literal+=Literal)* ']' )?
;

Literal returns Literal: 
	name=EString
;

Enum returns Enum: 
	'name='name=EString '=>' boenum=[BOEnum|EString]
;

BusinessType returns BusinessType:
	{BusinessType}
	'BT='
	name=EString 
	'{'
		('references' '{' references+=References ( "," references+=References)* '}' )?
	'}'
;
BusinessObject returns BusinessObject:
	{BusinessObject}
	'BO='
	name=EString 
	'{'
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
		('references' '{' references+=References ( "," references+=References)* '}' )?
		('usesEnums' '{' enums+=SEnum ( "," enums+=SEnum)* '}' )?
		('superTypes' '{' superTypes+=[BusinessObject|EString] ( "," superTypes+=[BusinessObject|EString])* '}' )?
		('basedOn' '{' basedon+=BasedOn ( "," basedon+=BasedOn)* '}' )?
	'}';

BasedOn returns BasedOn: 
	businessobject=[BusinessObject|EString]
	'{'
		('removes' ('[' removes+=[Attribute|EString] ( "," removes+=[Attribute|EString] )* ']' )?)?
	'}'
;


SEnum returns Enum: 
	'name='name=EString '=>' boenum=[BOEnum|EString]
;

Attribute returns Attribute:
	name=EString
	'{'
		('Label=' label=EString)?
		'Type=' type=DataTypes
		('defaultValue=' defaultValue=EString)?
		(mandatory?='Mandatory')?
	'}';

	
References returns References:
	RefBusinessObject | RefBusinessType
;

RefBusinessObject returns References:
	{References}
	'BO=' businessobject=[BusinessObject|EString]
	'['
		('Inclusion=' Inclusion=Inclusions)?
		('Multiplicity=' multiplicity=Multiplicity)?
	']'
;
RefBusinessType returns References:
	{References}
	'BT=' businessobject=[BusinessType|EString]
;

enum DataTypes returns DataTypes:
				Integer = 'Integer' | String = 'String' | Double = 'Double' | Date = 'Date';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum Inclusions returns Inclusions:
				Mandatory = 'Mandatory' | Optional = 'Optional';

enum Multiplicity returns Multiplicity:
				oneToone = 'One-to-One' | oneTomany ='One-to-Many' | manyToone = 'Many-to-One' | manyTomany = 'Many-to-Many';

