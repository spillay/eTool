/*
 * generated by Xtext
 */
package com.dsleng.etool.dsl.ui.contentassist

import com.dsleng.etool.dsl.ui.contentassist.AbstractControlsProposalProvider
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import com.dsleng.etool.models.controls.Type
import com.dsleng.etool.models.controls.Composite
import com.dsleng.etool.models.controls.SimpleControl

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class ControlsProposalProvider extends AbstractControlsProposalProvider {
	
	override completeTypeParameter_Value(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		acceptor.accept(createCompletionProposal("Label",context))	
		acceptor.accept(createCompletionProposal("Name",context))	
		super.completeTypeParameter_Value(model, assignment, context, acceptor)
	}
	
	/* 
	def ProcessSimpleControl(ContentAssistContext context, ICompletionProposalAcceptor acceptor,String name,SimpleControl control){
		//val controlName = name + ":" + control.name + ":" + control.uses.name + ":"
		val controlName = control.name + ":" + control.uses.name + ":"
		val options = control.uses.options
		for(o: options){
			val optionName = controlName + ":" + o.name
			acceptor.accept(createCompletionProposal(optionName,context))	
		}
	}
	
	override completeTypeParameter_Option(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if (model.eContainer instanceof Type){
			val type = (model.eContainer as Type)
			//val controlName = (type.control as Composite).usesControl.name + ":" + (type.control as Composite).usesControl.uses.name
			val CompositeControl = type.control as Composite
			ProcessSimpleControl(context,acceptor,CompositeControl.name,CompositeControl.usesControl)
			
			// Process Siblings
			for(s: CompositeControl.sibling){
				ProcessSimpleControl(context,acceptor,CompositeControl.name,s)
			}
		}
		super.completeTypeParameter_Option(model, assignment, context, acceptor)
	}
	*/
	
}
