/*
 * generated by Xtext
 */
package com.dsleng.etool.xtext.presentation.view.serializer;

import com.dsleng.etool.presentation.view.Content;
import com.dsleng.etool.presentation.view.Horizontal;
import com.dsleng.etool.presentation.view.Layers;
import com.dsleng.etool.presentation.view.Layout;
import com.dsleng.etool.presentation.view.Page;
import com.dsleng.etool.presentation.view.Vertical;
import com.dsleng.etool.presentation.view.ViewPackage;
import com.dsleng.etool.xtext.presentation.view.services.ViewDslGrammarAccess;
import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public abstract class AbstractViewDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ViewDslGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == ViewPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case ViewPackage.CONTENT:
				sequence_Content(context, (Content) semanticObject); 
				return; 
			case ViewPackage.HORIZONTAL:
				sequence_Horizontal(context, (Horizontal) semanticObject); 
				return; 
			case ViewPackage.LAYERS:
				sequence_Layers_Impl(context, (Layers) semanticObject); 
				return; 
			case ViewPackage.LAYOUT:
				sequence_Layout(context, (Layout) semanticObject); 
				return; 
			case ViewPackage.PAGE:
				sequence_Page(context, (Page) semanticObject); 
				return; 
			case ViewPackage.VERTICAL:
				sequence_Vertical(context, (Vertical) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (
	 *         resizable?='resizable'? 
	 *         style=EString? 
	 *         position=LayoutPosition? 
	 *         minSize=EInt? 
	 *         maxSize=EInt? 
	 *         height=EInt? 
	 *         width=EInt?
	 *     )
	 */
	protected void sequence_Content(EObject context, Content semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         resizable?='resizable'? 
	 *         style=EString? 
	 *         position=LayoutPosition? 
	 *         minSize=EInt? 
	 *         maxSize=EInt? 
	 *         height=EInt?
	 *     )
	 */
	protected void sequence_Horizontal(EObject context, Horizontal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (resizable?='resizable'? style=EString? position=LayoutPosition? minSize=EInt? maxSize=EInt?)
	 */
	protected void sequence_Layers_Impl(EObject context, Layers semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((layers+=Layers layers+=Layers*)?)
	 */
	protected void sequence_Layout(EObject context, Layout semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     layout=Layout
	 */
	protected void sequence_Page(EObject context, Page semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, ViewPackage.Literals.PAGE__LAYOUT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ViewPackage.Literals.PAGE__LAYOUT));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getPageAccess().getLayoutLayoutParserRuleCall_3_0(), semanticObject.getLayout());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         resizable?='resizable'? 
	 *         style=EString? 
	 *         position=LayoutPosition? 
	 *         minSize=EInt? 
	 *         maxSize=EInt? 
	 *         width=EInt?
	 *     )
	 */
	protected void sequence_Vertical(EObject context, Vertical semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
